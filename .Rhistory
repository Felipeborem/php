scale_size(range = c(.1, 24), name="Population (M)")
# Libraries
library(ggplot2)
library(dplyr)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Most basic bubble plot
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")
# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)
library(viridis)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Most basic bubble plot
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent)) +
geom_point(alpha=0.5, shape=21, color="black") +
scale_size(range = c(.1, 24), name="Population (M)") +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A") +
theme_ipsum() +
theme(legend.position="bottom") +
ylab("Life Expectancy") +
xlab("Gdp per Capita") +
theme(legend.position = "none")
# Libraries
library(ggplot2)
library(dplyr)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Most basic bubble plot
ggplot(data, aes(x=gdpPercap, y=lifeExp, size = pop)) +
geom_point(alpha=0.7)
# Libraries
library(ggplot2)
library(dplyr)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Most basic bubble plot
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")
# Libraries
library(ggplot2)
library(dplyr)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Most basic bubble plot
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")
# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)
library(viridis)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Most basic bubble plot
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent)) +
geom_point(alpha=0.5, shape=21, color="black") +
scale_size(range = c(.1, 24), name="Population (M)") +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A") +
# theme_ipsum() +
theme(legend.position="bottom") +
ylab("Life Expectancy") +
xlab("Gdp per Capita") +
theme(legend.position = "none")
f.soma <- function(x,y) {
out <- x+y
return(out)
}
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls",na="NA")
dados
library(tidyverse)
library(janitor)
# Funções tidyverse e janitor
library(tidyverse)
library(janitor)
names(dados)
dados <- clean_names(dados) # a função clean_names() para primeiro ajuste dos nomes das variaveis
names(dados)
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls",na="NA")
dados
library(tidyverse)
library(janitor)
names(dados)
dados <- clean_names(dados) # a função clean_names() para primeiro ajuste dos nomes das variaveis
names(dados)
### Linhas e colunas vazias
dados <- remove_empty(dados,"rows")
dados <- remove_empty(dados,"cols")
names(dados)
library(tidyverse)
library(janitor)
names(dados)
dados <- clean_names(dados) # a função clean_names() para primeiro ajuste dos nomes das variaveis
names(dados)
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls",na="NA")
dados
library(tidyverse)
library(janitor)
names(dados)
dados <- clean_names(dados)
names(dados)
dados <- remove_empty(dados,"rows")
dados <- remove_empty(dados,"cols")
names(dados)
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls")
dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="NA")
dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="NA")
dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="NA")
dados
?read_excel
View(dados)
View(dados)
dados <- remove_empty(dados,"rows")
dados <- remove_empty(dados,"cols")
names(dados)
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls")
dados
ID <- seq(1:6)
pes <- c(62, 70, 52, 98, 90, 70)
alt <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)
imc <- pes/(alt^2)
dados <- data.frame(ID=ID,peso=pes,altura=alt, imc=imc)
dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="NA")
dados
dados
ID <- seq(1:6)
pes <- c(62, 70, 52, 98, 90, 70)
alt <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)
imc <- pes/(alt^2)
dados <- data.frame(ID=ID,peso=pes,altura=alt, imc=imc)
dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="NA")
dados
ID <- seq(1:6)
pes <- c(62, 70, 52, 98, 90, 70)
alt <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)
imc <- pes/(alt^2)
dados <- data.frame(ID=ID,peso=pes,altura=alt, imc=imc)
dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls")
dados
ID <- seq(1:6)
pes <- c(62, 70, 52, 98, 90, 70)
alt <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)
imc <- pes/(alt^2)
dados <- data.frame(ID=ID,peso=pes,altura=alt, imc=imc)
dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="NA")
dados
ID <- seq(1:6)
pes <- c(62, 70, 52, 98, 90, 70)
alt <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)
imc <- pes/(alt^2)
dados <- data.frame(ID=ID,peso=pes,altura=alt, imc=imc)
dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="NA")
dados
ID <- seq(1:6)
pes <- c(62, 70, 52, 98, 90, 70)
alt <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)
imc <- pes/(alt^2)
dados <- data.frame(ID=ID,peso=pes,altura=alt, imc=imc)
dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="Espaço em branco")
dados
ID <- seq(1:6)
pes <- c(62, 70, 52, 98, 90, 70)
alt <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)
imc <- pes/(alt^2)
dados <- data.frame(ID=ID,peso=pes,altura=alt, imc=imc)
dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="Espaço em branco")
dados
library(tidyverse)
library(janitor)
names(dados)
dados <- clean_names(dados) # a função clean_names() para primeiro ajuste dos nomes das variaveis
names(dados)
dadosNomesLimpos <- clean_names(dados) # a função clean_names() para primeiro ajuste dos nomes das variaveis
names(dados)
dados
ID <- seq(1:6)
pes <- c(62, 70, 52, 98, 90, 70)
alt <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)
imc <- pes/(alt^2)
dados <- data.frame(ID=ID,peso=pes,altura=alt, imc=imc)
dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="NA")
dados
dados <- remove_empty(dados,"rows")
dados <- remove_empty(dados,"cols")
names(dados)
library(tidyverse)
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="NA")
dados
#acho que é isso no final do "base.xls"
#na="NA"
library(tidyverse)
library(janitor)
names(dados)
dados <- clean_names(dados)
names(dados)
dados <- remove_empty(dados,"rows")
dados <- remove_empty(dados,"cols")
names(dados)
library(dplyr)
dados1 <-  distinct(dados,id, .keep_all = TRUE)
dados1
library(dplyr)
dados1 <-  distinct(dados,id, .keep_all = TRUE)
dados1
str(dados1)
## converter as variáveis para data reduzida
dados1$data_aval  <- as.Date(dados1$data_aval)
dados1$data_nascimento  <- as.Date(dados1$data_nascimento)
str(dados1)
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls", na="NA")
dados
#na="NA"
library(tidyverse)
library(janitor)
names(dados)
dados <- clean_names(dados)
names(dados)
dados <- remove_empty(dados,"rows")
dados <- remove_empty(dados,"cols")
names(dados)
library(dplyr)
dados1 <-  distinct(dados,id, .keep_all = TRUE)
dados1
str(dados1)
## converter as variáveis para data reduzida
dados1$data_aval  <- as.Date(dados1$data_aval)
dados1$data_nascimento  <- as.Date(dados1$data_nascimento)
str(dados1)
# A variável indicadora de cor branca (cor_branco) está categorizada
# como 0 para não e 1 para sim.
tabyl(dados1,cor_branco)
dados1$cor_branco <- ifelse(dados1$id==9,1,dados1$cor_branco)
tabyl(dados1,cor_branco)
library(forcats)
dados1$cor_branco  <- as.factor(dados1$cor_branco)
dados1$cor_branco <- fct_recode(dados1$cor_branco,
branco = "1",
nbranco = "0")
tabyl(dados1,cor_branco)
library(forcats)
dados1$cor_branco  <- as.factor(dados1$cor_branco)
dados1$cor_branco <- fct_recode(dados1$cor_branco,
branco = "1",
Nao branco = "0")
tabyl(dados1,cor_branco)
library(forcats)
dados1$cor_branco  <- as.factor(dados1$cor_branco)
dados1$cor_branco <- fct_recode(dados1$cor_branco,
branco = "1",
Nao branco = "0")
tabyl(dados1,cor_branco)
# Primeiro, precisamos informar o R que a variável é fator, com o comando as.factor(.).
library(forcats)
dados1$cor_branco  <- as.factor(dados1$cor_branco)
dados1$cor_branco <- fct_recode(dados1$cor_branco,
branco = "1",
Naobranco = "0")
tabyl(dados1,cor_branco)
library(forcats)
dados1$cor_branco  <- as.factor(dados1$cor_branco)
dados1$cor_branco <- fct_recode(dados1$cor_branco,
branco = "1",
Naobranco = "0")
tabyl(dados1,cor_branco)
library(forcats)
dados1$cor_branco  <- as.factor(dados1$cor_branco)
dados1$cor_branco <- fct_recode(dados1$cor_branco,
branco = "1",
Naobranco = "0")
tabyl(dados1,cor_branco)
# Primeiro, precisamos informar o R que a variável é fator, com o comando as.factor(.).
library(forcats)
dados1$cor_branco  <- as.factor(dados1$cor_branco)
dados1$cor_branco <- fct_recode(dados1$cor_branco,
branco = "1",
nbranco = "0")
tabyl(dados1,cor_branco)
library(skimr)
skim(dados1)
kable(skim(dados1))
library(skimr)
skim(dados1)
library(skimr)
skim(dados)
library(skimr)
skim(dados)
kable(skim(dados1))
library(skimr)
skim(dados1)
kable(skim(dados1))
install.packages("skimr")
library(skimr)
skim(dados)
kable(skim(dados1))
library(skimr)
skim(dados)
kable(skim(dados))
libary(knitr)
library(knitr)
library(knitr)
library(knitr)
library(skimr)
skim(dados1)
kable(skim(dados1))
# Para fazer análise geral de todas as variáveis da base de dados, usamos a função skim(.) do pacote skimr.
library(knitr)
library(knitr)
library(skinr)
library(knitr)
library(skinr)
library(knitr)
library(skinr)
library(knitr)
library(skinr)
library(knitr)
library(skinr)
library(skimr)
skim(dados1)
kable(skim(dados1))
library(knitr)
library(skinr)
library(knitr)
library(skinr)
library(skimr)
skim(dados1)
kable(skim(dados1))
dados1 <- mutate(dados1,imc = peso_pre/(alt^2))
kable(skim(dados1,imc))
str(dados1)
dados
dados1
library(knitr)
library(skinr)
library(skimr)
skim(dados1)
kable(skim(dados1))
library(knitr)
library(skinr)
library(skimr)
skim(dados1)
kable(skim(dados1))
dados1
library(knitr)
library(skinr)
library(skimr)
skim(dados1)
kable(skim(dados1))
library(knitr)
library(skimr)
library(knitr)
library(skimr)
library(skimr)
skim(dados1)
kable(skim(dados1))
library(knitr)
library(skimr)
library(skimr)
skim(dados1)
library(knitr)
library(skimr)
library(skimr)
skim(dados)
kable(skim(dados1))
library(knitr)
library(skimr)
library(skimr)
skim(dados)
kable(skim(dados1))
dados1
library(knitr)
library(skimr)
library(skimr)
skim(dados)
kable(skim(dados1))
library(knitr)
library(skimr)
dados1
dados1 <- mutate(dados1,imc = peso_pre/(alt^2))
kable(skim(dados1,imc))
str(dados1)
skim(dados1)
kable(skim(dados1))
dados1 <- mutate(dados1,imc = peso_pre/(alt^2))
kable(skim(dados1,imc))
str(dados1)
## Importando a base de dados
library(readxl)
dados <- read_excel(path = "Base_CTG_caracterizacao.xls")
dados
### Nome das variáveis
## Funções tidyverse e janitor
library(tidyverse)
library(janitor)
names(dados)
dados <- clean_names(dados) # a função clean_names() para primeiro ajuste dos nomes das variaveis
names(dados)
### Linhas e colunas vazias
dados <- remove_empty(dados,"rows")
dados <- remove_empty(dados,"cols")
names(dados)
### Identificação de casos duplicados
get_dupes(dados, id)
library(dplyr)
dados1 <-  distinct(dados,id, .keep_all = TRUE)
dados1
### Identificar tipo e classe de todas as variáveis da base
str(dados1)
## converter as variáveis para data reduzida
dados1$data_aval  <- as.Date(dados1$data_aval)
dados1$data_nascimento  <- as.Date(dados1$data_nascimento)
str(dados1)
# Para variáveis qualitativas: tabela de frequências da variável corion.
#do pacote janitor
tabyl(dados1,corion)
# Para lidar com variáveis de texto, vamos utilizar o pacote stringr.
library(stringr)
dados1$corion <- str_to_lower(dados1$corion)
tabyl(dados1,corion)
# A variável indicadora de cor branca (cor_branco) está categorizada
# como 0 para não e 1 para sim.
tabyl(dados1,cor_branco)
dados1$cor_branco <- ifelse(dados1$id==9,1,dados1$cor_branco)
# No R tem um pacote só para manipular fatores: o forcats (for categorial variables).
# Basicamente, o forcats é composto por funções de apenas dois tipos: funções que começam com fct_, que recebem uma lista de fatores e devolvem um fator e funções que começam com lvl_, que modificam os níveis de um fator.
# Primeiro, precisamos informar o R que a variável é fator, com o comando as.factor(.).
library(forcats)
dados1$cor_branco  <- as.factor(dados1$cor_branco)
dados1$cor_branco <- fct_recode(dados1$cor_branco,
branco = "1",
nbranco = "0")
tabyl(dados1,cor_branco)
# Para fazer análise geral de todas as variáveis da base de dados, usamos a função skim(.) do pacote skimr.
library(knitr)
library(skimr)
library(skimr)
skim(dados1)
kable(skim(dados1))
dados1
### Transformação de variáveis quantitativas
# Calcular IMC (índice de massa corpórea) - peso (em km) dividido pela altura (em metros) ao quadrado.
dados1 <- mutate(dados1,imc = peso_pre/(alt^2))
kable(skim(dados1,imc))
str(dados1)
dados1 <- mutate(dados1,imc = peso_pre/(alt^2))
kable(skim(dados1,imc))
str(dados1)
dados1 <- mutate(dados1,imc = peso_pre/(alt^2))
kable(skim(dados1,imc))
str(dados1)
# Calcular IMC (índice de massa corpórea) - peso (em km) dividido pela altura (em metros) ao quadrado.
dados1 <- mutate(dados1,imc = peso_pre/(alt^2))
kable(skim(dados1,imc))
library(knitr)
library(knirt)
library(knitr)
library(knitr)
